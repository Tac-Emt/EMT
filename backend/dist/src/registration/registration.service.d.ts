import { PrismaService } from '../prisma/prisma.service';
import { Prisma, RegistrationStatus } from '@prisma/client';
import { EmailService } from '../email/email.service';
export declare class RegistrationService {
    private prisma;
    private emailService;
    constructor(prisma: PrismaService, emailService: EmailService);
    createRegistration(data: {
        userId: number;
        eventId: number;
        registrationTypeId: number;
        status: RegistrationStatus;
    }): Promise<{
        event: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            title: string;
            description: string;
            date: Date;
            location: string;
            capacity: number;
            status: import(".prisma/client").$Enums.EventStatus;
            image: string;
            agenda: Prisma.JsonValue;
            resources: Prisma.JsonValue;
            category: import(".prisma/client").$Enums.EventCategory;
            type: import(".prisma/client").$Enums.EventType;
            eventTag: string;
            registrationLink: string;
            seriesId: number;
            checkedIn: boolean;
            checkedInAt: Date;
            slug: string;
            pageContent: Prisma.JsonValue;
            pageSettings: Prisma.JsonValue;
        };
        user: {
            id: number;
            email: string;
            password: string;
            name: string;
            role: import(".prisma/client").$Enums.Role;
            isEmailVerified: boolean;
            otp: string;
            otpExpires: Date;
            passwordResetAt: Date;
            createdAt: Date;
            updatedAt: Date;
            bio: string;
            photo: string;
            organization: string;
            title: string;
            socialLinks: Prisma.JsonValue;
        };
        type: {
            id: number;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            description: string;
            capacity: number;
            eventId: number;
            price: number;
            startDate: Date;
            endDate: Date;
        };
    } & {
        id: number;
        createdAt: Date;
        updatedAt: Date;
        status: import(".prisma/client").$Enums.RegistrationStatus;
        checkedIn: boolean;
        checkedInAt: Date;
        eventId: number;
        userId: number;
        typeId: number;
        checkInCodeId: number;
    }>;
    getRegistrations(filters: {
        userId?: number;
        eventId?: number;
        status?: RegistrationStatus;
    }): Promise<({
        event: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            title: string;
            description: string;
            date: Date;
            location: string;
            capacity: number;
            status: import(".prisma/client").$Enums.EventStatus;
            image: string;
            agenda: Prisma.JsonValue;
            resources: Prisma.JsonValue;
            category: import(".prisma/client").$Enums.EventCategory;
            type: import(".prisma/client").$Enums.EventType;
            eventTag: string;
            registrationLink: string;
            seriesId: number;
            checkedIn: boolean;
            checkedInAt: Date;
            slug: string;
            pageContent: Prisma.JsonValue;
            pageSettings: Prisma.JsonValue;
        };
        user: {
            id: number;
            email: string;
            password: string;
            name: string;
            role: import(".prisma/client").$Enums.Role;
            isEmailVerified: boolean;
            otp: string;
            otpExpires: Date;
            passwordResetAt: Date;
            createdAt: Date;
            updatedAt: Date;
            bio: string;
            photo: string;
            organization: string;
            title: string;
            socialLinks: Prisma.JsonValue;
        };
        type: {
            id: number;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            description: string;
            capacity: number;
            eventId: number;
            price: number;
            startDate: Date;
            endDate: Date;
        };
    } & {
        id: number;
        createdAt: Date;
        updatedAt: Date;
        status: import(".prisma/client").$Enums.RegistrationStatus;
        checkedIn: boolean;
        checkedInAt: Date;
        eventId: number;
        userId: number;
        typeId: number;
        checkInCodeId: number;
    })[]>;
    getRegistration(id: number): Promise<{
        event: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            title: string;
            description: string;
            date: Date;
            location: string;
            capacity: number;
            status: import(".prisma/client").$Enums.EventStatus;
            image: string;
            agenda: Prisma.JsonValue;
            resources: Prisma.JsonValue;
            category: import(".prisma/client").$Enums.EventCategory;
            type: import(".prisma/client").$Enums.EventType;
            eventTag: string;
            registrationLink: string;
            seriesId: number;
            checkedIn: boolean;
            checkedInAt: Date;
            slug: string;
            pageContent: Prisma.JsonValue;
            pageSettings: Prisma.JsonValue;
        };
        user: {
            id: number;
            email: string;
            password: string;
            name: string;
            role: import(".prisma/client").$Enums.Role;
            isEmailVerified: boolean;
            otp: string;
            otpExpires: Date;
            passwordResetAt: Date;
            createdAt: Date;
            updatedAt: Date;
            bio: string;
            photo: string;
            organization: string;
            title: string;
            socialLinks: Prisma.JsonValue;
        };
        type: {
            id: number;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            description: string;
            capacity: number;
            eventId: number;
            price: number;
            startDate: Date;
            endDate: Date;
        };
    } & {
        id: number;
        createdAt: Date;
        updatedAt: Date;
        status: import(".prisma/client").$Enums.RegistrationStatus;
        checkedIn: boolean;
        checkedInAt: Date;
        eventId: number;
        userId: number;
        typeId: number;
        checkInCodeId: number;
    }>;
    updateRegistration(id: number, data: {
        status?: RegistrationStatus;
        registrationTypeId?: number;
    }): Promise<{
        event: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            title: string;
            description: string;
            date: Date;
            location: string;
            capacity: number;
            status: import(".prisma/client").$Enums.EventStatus;
            image: string;
            agenda: Prisma.JsonValue;
            resources: Prisma.JsonValue;
            category: import(".prisma/client").$Enums.EventCategory;
            type: import(".prisma/client").$Enums.EventType;
            eventTag: string;
            registrationLink: string;
            seriesId: number;
            checkedIn: boolean;
            checkedInAt: Date;
            slug: string;
            pageContent: Prisma.JsonValue;
            pageSettings: Prisma.JsonValue;
        };
        user: {
            id: number;
            email: string;
            password: string;
            name: string;
            role: import(".prisma/client").$Enums.Role;
            isEmailVerified: boolean;
            otp: string;
            otpExpires: Date;
            passwordResetAt: Date;
            createdAt: Date;
            updatedAt: Date;
            bio: string;
            photo: string;
            organization: string;
            title: string;
            socialLinks: Prisma.JsonValue;
        };
        type: {
            id: number;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            description: string;
            capacity: number;
            eventId: number;
            price: number;
            startDate: Date;
            endDate: Date;
        };
    } & {
        id: number;
        createdAt: Date;
        updatedAt: Date;
        status: import(".prisma/client").$Enums.RegistrationStatus;
        checkedIn: boolean;
        checkedInAt: Date;
        eventId: number;
        userId: number;
        typeId: number;
        checkInCodeId: number;
    }>;
    deleteRegistration(id: number): Promise<{
        message: string;
    }>;
    getEventRegistrationStats(eventId: number): Promise<{
        total: number;
        byStatus: {};
        byType: {};
    }>;
}
