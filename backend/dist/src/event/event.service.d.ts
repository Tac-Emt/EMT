import { PrismaService } from '../prisma/prisma.service';
import { FileUploadService } from '../file-upload/file-upload.service';
import { Prisma } from '@prisma/client';
type EventStatus = 'DRAFT' | 'PUBLISHED' | 'CANCELLED';
type EventCategory = 'CS' | 'RAS' | 'IAS' | 'WIE';
type EventType = 'CONGRESS' | 'CONFERENCE' | 'HACKATHON' | 'NORMAL' | 'ONLINE';
export declare class EventService {
    private prisma;
    private fileUploadService;
    constructor(prisma: PrismaService, fileUploadService: FileUploadService);
    create(data: any): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        title: string;
        description: string;
        date: Date;
        location: string;
        capacity: number;
        status: import(".prisma/client").$Enums.EventStatus;
        image: string;
        agenda: Prisma.JsonValue;
        resources: Prisma.JsonValue;
        category: import(".prisma/client").$Enums.EventCategory;
        type: import(".prisma/client").$Enums.EventType;
        eventTag: string;
        registrationLink: string;
        seriesId: number;
        checkedIn: boolean;
        checkedInAt: Date;
        slug: string;
        pageContent: Prisma.JsonValue;
        pageSettings: Prisma.JsonValue;
    }>;
    findAll(): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        title: string;
        description: string;
        date: Date;
        location: string;
        capacity: number;
        status: import(".prisma/client").$Enums.EventStatus;
        image: string;
        agenda: Prisma.JsonValue;
        resources: Prisma.JsonValue;
        category: import(".prisma/client").$Enums.EventCategory;
        type: import(".prisma/client").$Enums.EventType;
        eventTag: string;
        registrationLink: string;
        seriesId: number;
        checkedIn: boolean;
        checkedInAt: Date;
        slug: string;
        pageContent: Prisma.JsonValue;
        pageSettings: Prisma.JsonValue;
    }[]>;
    findOne(id: number): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        title: string;
        description: string;
        date: Date;
        location: string;
        capacity: number;
        status: import(".prisma/client").$Enums.EventStatus;
        image: string;
        agenda: Prisma.JsonValue;
        resources: Prisma.JsonValue;
        category: import(".prisma/client").$Enums.EventCategory;
        type: import(".prisma/client").$Enums.EventType;
        eventTag: string;
        registrationLink: string;
        seriesId: number;
        checkedIn: boolean;
        checkedInAt: Date;
        slug: string;
        pageContent: Prisma.JsonValue;
        pageSettings: Prisma.JsonValue;
    }>;
    update(id: number, data: any): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        title: string;
        description: string;
        date: Date;
        location: string;
        capacity: number;
        status: import(".prisma/client").$Enums.EventStatus;
        image: string;
        agenda: Prisma.JsonValue;
        resources: Prisma.JsonValue;
        category: import(".prisma/client").$Enums.EventCategory;
        type: import(".prisma/client").$Enums.EventType;
        eventTag: string;
        registrationLink: string;
        seriesId: number;
        checkedIn: boolean;
        checkedInAt: Date;
        slug: string;
        pageContent: Prisma.JsonValue;
        pageSettings: Prisma.JsonValue;
    }>;
    remove(id: number): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        title: string;
        description: string;
        date: Date;
        location: string;
        capacity: number;
        status: import(".prisma/client").$Enums.EventStatus;
        image: string;
        agenda: Prisma.JsonValue;
        resources: Prisma.JsonValue;
        category: import(".prisma/client").$Enums.EventCategory;
        type: import(".prisma/client").$Enums.EventType;
        eventTag: string;
        registrationLink: string;
        seriesId: number;
        checkedIn: boolean;
        checkedInAt: Date;
        slug: string;
        pageContent: Prisma.JsonValue;
        pageSettings: Prisma.JsonValue;
    }>;
    createEvent(data: {
        title: string;
        description: string;
        date: Date;
        location: string;
        image?: string;
        category: EventCategory;
        type: EventType;
        eventTag: string;
        organizerId: number;
    }): Promise<{
        organizers: ({
            organizer: {
                id: number;
                email: string;
                password: string;
                name: string;
                role: import(".prisma/client").$Enums.Role;
                isEmailVerified: boolean;
                otp: string;
                otpExpires: Date;
                passwordResetAt: Date;
                createdAt: Date;
                updatedAt: Date;
                bio: string;
                photo: string;
                organization: string;
                title: string;
                socialLinks: Prisma.JsonValue;
            };
        } & {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            isHost: boolean;
            pendingConfirmation: boolean;
            expiresAt: Date;
            organizerId: number;
            eventId: number;
        })[];
    } & {
        id: number;
        createdAt: Date;
        updatedAt: Date;
        title: string;
        description: string;
        date: Date;
        location: string;
        capacity: number;
        status: import(".prisma/client").$Enums.EventStatus;
        image: string;
        agenda: Prisma.JsonValue;
        resources: Prisma.JsonValue;
        category: import(".prisma/client").$Enums.EventCategory;
        type: import(".prisma/client").$Enums.EventType;
        eventTag: string;
        registrationLink: string;
        seriesId: number;
        checkedIn: boolean;
        checkedInAt: Date;
        slug: string;
        pageContent: Prisma.JsonValue;
        pageSettings: Prisma.JsonValue;
    }>;
    getEvents(filters: {
        organizerId?: number;
        startDate?: Date;
        endDate?: Date;
    }): Promise<({
        organizers: ({
            organizer: {
                id: number;
                email: string;
                password: string;
                name: string;
                role: import(".prisma/client").$Enums.Role;
                isEmailVerified: boolean;
                otp: string;
                otpExpires: Date;
                passwordResetAt: Date;
                createdAt: Date;
                updatedAt: Date;
                bio: string;
                photo: string;
                organization: string;
                title: string;
                socialLinks: Prisma.JsonValue;
            };
        } & {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            isHost: boolean;
            pendingConfirmation: boolean;
            expiresAt: Date;
            organizerId: number;
            eventId: number;
        })[];
        speakers: ({
            speaker: {
                id: number;
                email: string;
                password: string;
                name: string;
                role: import(".prisma/client").$Enums.Role;
                isEmailVerified: boolean;
                otp: string;
                otpExpires: Date;
                passwordResetAt: Date;
                createdAt: Date;
                updatedAt: Date;
                bio: string;
                photo: string;
                organization: string;
                title: string;
                socialLinks: Prisma.JsonValue;
            };
        } & {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            status: import(".prisma/client").$Enums.SpeakerStatus;
            eventId: number;
            speakerId: number;
        })[];
        eventResources: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            title: string;
            description: string;
            type: string;
            eventId: number;
            url: string;
        }[];
    } & {
        id: number;
        createdAt: Date;
        updatedAt: Date;
        title: string;
        description: string;
        date: Date;
        location: string;
        capacity: number;
        status: import(".prisma/client").$Enums.EventStatus;
        image: string;
        agenda: Prisma.JsonValue;
        resources: Prisma.JsonValue;
        category: import(".prisma/client").$Enums.EventCategory;
        type: import(".prisma/client").$Enums.EventType;
        eventTag: string;
        registrationLink: string;
        seriesId: number;
        checkedIn: boolean;
        checkedInAt: Date;
        slug: string;
        pageContent: Prisma.JsonValue;
        pageSettings: Prisma.JsonValue;
    })[]>;
    getEventById(id: number): Promise<{
        organizers: ({
            organizer: {
                id: number;
                email: string;
                password: string;
                name: string;
                role: import(".prisma/client").$Enums.Role;
                isEmailVerified: boolean;
                otp: string;
                otpExpires: Date;
                passwordResetAt: Date;
                createdAt: Date;
                updatedAt: Date;
                bio: string;
                photo: string;
                organization: string;
                title: string;
                socialLinks: Prisma.JsonValue;
            };
        } & {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            isHost: boolean;
            pendingConfirmation: boolean;
            expiresAt: Date;
            organizerId: number;
            eventId: number;
        })[];
        speakers: ({
            speaker: {
                id: number;
                email: string;
                password: string;
                name: string;
                role: import(".prisma/client").$Enums.Role;
                isEmailVerified: boolean;
                otp: string;
                otpExpires: Date;
                passwordResetAt: Date;
                createdAt: Date;
                updatedAt: Date;
                bio: string;
                photo: string;
                organization: string;
                title: string;
                socialLinks: Prisma.JsonValue;
            };
        } & {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            status: import(".prisma/client").$Enums.SpeakerStatus;
            eventId: number;
            speakerId: number;
        })[];
        eventResources: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            title: string;
            description: string;
            type: string;
            eventId: number;
            url: string;
        }[];
    } & {
        id: number;
        createdAt: Date;
        updatedAt: Date;
        title: string;
        description: string;
        date: Date;
        location: string;
        capacity: number;
        status: import(".prisma/client").$Enums.EventStatus;
        image: string;
        agenda: Prisma.JsonValue;
        resources: Prisma.JsonValue;
        category: import(".prisma/client").$Enums.EventCategory;
        type: import(".prisma/client").$Enums.EventType;
        eventTag: string;
        registrationLink: string;
        seriesId: number;
        checkedIn: boolean;
        checkedInAt: Date;
        slug: string;
        pageContent: Prisma.JsonValue;
        pageSettings: Prisma.JsonValue;
    }>;
    updateEvent(id: number, data: {
        title?: string;
        description?: string;
        date?: Date;
        status?: EventStatus;
        location?: string;
        image?: string;
        category?: EventCategory;
        type?: EventType;
        eventTag?: string;
    }): Promise<{
        organizers: ({
            organizer: {
                id: number;
                email: string;
                password: string;
                name: string;
                role: import(".prisma/client").$Enums.Role;
                isEmailVerified: boolean;
                otp: string;
                otpExpires: Date;
                passwordResetAt: Date;
                createdAt: Date;
                updatedAt: Date;
                bio: string;
                photo: string;
                organization: string;
                title: string;
                socialLinks: Prisma.JsonValue;
            };
        } & {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            isHost: boolean;
            pendingConfirmation: boolean;
            expiresAt: Date;
            organizerId: number;
            eventId: number;
        })[];
    } & {
        id: number;
        createdAt: Date;
        updatedAt: Date;
        title: string;
        description: string;
        date: Date;
        location: string;
        capacity: number;
        status: import(".prisma/client").$Enums.EventStatus;
        image: string;
        agenda: Prisma.JsonValue;
        resources: Prisma.JsonValue;
        category: import(".prisma/client").$Enums.EventCategory;
        type: import(".prisma/client").$Enums.EventType;
        eventTag: string;
        registrationLink: string;
        seriesId: number;
        checkedIn: boolean;
        checkedInAt: Date;
        slug: string;
        pageContent: Prisma.JsonValue;
        pageSettings: Prisma.JsonValue;
    }>;
    deleteEvent(id: number): Promise<{
        message: string;
    }>;
}
export {};
