import { SpeakerFeedbackService } from './speaker-feedback.service';
export declare class SpeakerFeedbackController {
    private speakerFeedbackService;
    constructor(speakerFeedbackService: SpeakerFeedbackService);
    createFeedback(data: {
        eventId: number;
        speakerId: number;
        userId: number;
        rating: number;
        comment?: string;
    }): Promise<{
        event: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            title: string;
            description: string;
            date: Date;
            location: string;
            capacity: number;
            status: import(".prisma/client").$Enums.EventStatus;
            image: string;
            agenda: import("@prisma/client/runtime/library").JsonValue;
            resources: import("@prisma/client/runtime/library").JsonValue;
            category: import(".prisma/client").$Enums.EventCategory;
            type: import(".prisma/client").$Enums.EventType;
            eventTag: string;
            registrationLink: string;
            seriesId: number;
            checkedIn: boolean;
            checkedInAt: Date;
            slug: string;
            pageContent: import("@prisma/client/runtime/library").JsonValue;
            pageSettings: import("@prisma/client/runtime/library").JsonValue;
        };
        user: {
            id: number;
            email: string;
            password: string;
            name: string;
            role: import(".prisma/client").$Enums.Role;
            isEmailVerified: boolean;
            otp: string;
            otpExpires: Date;
            passwordResetAt: Date;
            createdAt: Date;
            updatedAt: Date;
            bio: string;
            photo: string;
            organization: string;
            title: string;
            socialLinks: import("@prisma/client/runtime/library").JsonValue;
        };
        speaker: {
            id: number;
            email: string;
            password: string;
            name: string;
            role: import(".prisma/client").$Enums.Role;
            isEmailVerified: boolean;
            otp: string;
            otpExpires: Date;
            passwordResetAt: Date;
            createdAt: Date;
            updatedAt: Date;
            bio: string;
            photo: string;
            organization: string;
            title: string;
            socialLinks: import("@prisma/client/runtime/library").JsonValue;
        };
    } & {
        id: number;
        createdAt: Date;
        updatedAt: Date;
        eventId: number;
        speakerId: number;
        userId: number;
        rating: number;
        comment: string;
    }>;
    getFeedback(id: string): Promise<{
        event: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            title: string;
            description: string;
            date: Date;
            location: string;
            capacity: number;
            status: import(".prisma/client").$Enums.EventStatus;
            image: string;
            agenda: import("@prisma/client/runtime/library").JsonValue;
            resources: import("@prisma/client/runtime/library").JsonValue;
            category: import(".prisma/client").$Enums.EventCategory;
            type: import(".prisma/client").$Enums.EventType;
            eventTag: string;
            registrationLink: string;
            seriesId: number;
            checkedIn: boolean;
            checkedInAt: Date;
            slug: string;
            pageContent: import("@prisma/client/runtime/library").JsonValue;
            pageSettings: import("@prisma/client/runtime/library").JsonValue;
        };
        user: {
            id: number;
            email: string;
            password: string;
            name: string;
            role: import(".prisma/client").$Enums.Role;
            isEmailVerified: boolean;
            otp: string;
            otpExpires: Date;
            passwordResetAt: Date;
            createdAt: Date;
            updatedAt: Date;
            bio: string;
            photo: string;
            organization: string;
            title: string;
            socialLinks: import("@prisma/client/runtime/library").JsonValue;
        };
        speaker: {
            id: number;
            email: string;
            password: string;
            name: string;
            role: import(".prisma/client").$Enums.Role;
            isEmailVerified: boolean;
            otp: string;
            otpExpires: Date;
            passwordResetAt: Date;
            createdAt: Date;
            updatedAt: Date;
            bio: string;
            photo: string;
            organization: string;
            title: string;
            socialLinks: import("@prisma/client/runtime/library").JsonValue;
        };
    } & {
        id: number;
        createdAt: Date;
        updatedAt: Date;
        eventId: number;
        speakerId: number;
        userId: number;
        rating: number;
        comment: string;
    }>;
    getEventFeedbacks(eventId: string): Promise<({
        user: {
            id: number;
            email: string;
            password: string;
            name: string;
            role: import(".prisma/client").$Enums.Role;
            isEmailVerified: boolean;
            otp: string;
            otpExpires: Date;
            passwordResetAt: Date;
            createdAt: Date;
            updatedAt: Date;
            bio: string;
            photo: string;
            organization: string;
            title: string;
            socialLinks: import("@prisma/client/runtime/library").JsonValue;
        };
        speaker: {
            id: number;
            email: string;
            password: string;
            name: string;
            role: import(".prisma/client").$Enums.Role;
            isEmailVerified: boolean;
            otp: string;
            otpExpires: Date;
            passwordResetAt: Date;
            createdAt: Date;
            updatedAt: Date;
            bio: string;
            photo: string;
            organization: string;
            title: string;
            socialLinks: import("@prisma/client/runtime/library").JsonValue;
        };
    } & {
        id: number;
        createdAt: Date;
        updatedAt: Date;
        eventId: number;
        speakerId: number;
        userId: number;
        rating: number;
        comment: string;
    })[]>;
    getSpeakerFeedbacks(speakerId: string): Promise<({
        event: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            title: string;
            description: string;
            date: Date;
            location: string;
            capacity: number;
            status: import(".prisma/client").$Enums.EventStatus;
            image: string;
            agenda: import("@prisma/client/runtime/library").JsonValue;
            resources: import("@prisma/client/runtime/library").JsonValue;
            category: import(".prisma/client").$Enums.EventCategory;
            type: import(".prisma/client").$Enums.EventType;
            eventTag: string;
            registrationLink: string;
            seriesId: number;
            checkedIn: boolean;
            checkedInAt: Date;
            slug: string;
            pageContent: import("@prisma/client/runtime/library").JsonValue;
            pageSettings: import("@prisma/client/runtime/library").JsonValue;
        };
        user: {
            id: number;
            email: string;
            password: string;
            name: string;
            role: import(".prisma/client").$Enums.Role;
            isEmailVerified: boolean;
            otp: string;
            otpExpires: Date;
            passwordResetAt: Date;
            createdAt: Date;
            updatedAt: Date;
            bio: string;
            photo: string;
            organization: string;
            title: string;
            socialLinks: import("@prisma/client/runtime/library").JsonValue;
        };
    } & {
        id: number;
        createdAt: Date;
        updatedAt: Date;
        eventId: number;
        speakerId: number;
        userId: number;
        rating: number;
        comment: string;
    })[]>;
    updateFeedback(id: string, data: {
        rating?: number;
        comment?: string;
    }): Promise<{
        event: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            title: string;
            description: string;
            date: Date;
            location: string;
            capacity: number;
            status: import(".prisma/client").$Enums.EventStatus;
            image: string;
            agenda: import("@prisma/client/runtime/library").JsonValue;
            resources: import("@prisma/client/runtime/library").JsonValue;
            category: import(".prisma/client").$Enums.EventCategory;
            type: import(".prisma/client").$Enums.EventType;
            eventTag: string;
            registrationLink: string;
            seriesId: number;
            checkedIn: boolean;
            checkedInAt: Date;
            slug: string;
            pageContent: import("@prisma/client/runtime/library").JsonValue;
            pageSettings: import("@prisma/client/runtime/library").JsonValue;
        };
        user: {
            id: number;
            email: string;
            password: string;
            name: string;
            role: import(".prisma/client").$Enums.Role;
            isEmailVerified: boolean;
            otp: string;
            otpExpires: Date;
            passwordResetAt: Date;
            createdAt: Date;
            updatedAt: Date;
            bio: string;
            photo: string;
            organization: string;
            title: string;
            socialLinks: import("@prisma/client/runtime/library").JsonValue;
        };
        speaker: {
            id: number;
            email: string;
            password: string;
            name: string;
            role: import(".prisma/client").$Enums.Role;
            isEmailVerified: boolean;
            otp: string;
            otpExpires: Date;
            passwordResetAt: Date;
            createdAt: Date;
            updatedAt: Date;
            bio: string;
            photo: string;
            organization: string;
            title: string;
            socialLinks: import("@prisma/client/runtime/library").JsonValue;
        };
    } & {
        id: number;
        createdAt: Date;
        updatedAt: Date;
        eventId: number;
        speakerId: number;
        userId: number;
        rating: number;
        comment: string;
    }>;
    deleteFeedback(id: string): Promise<{
        message: string;
    }>;
    getSpeakerStats(speakerId: string): Promise<{
        totalFeedbacks: number;
        averageRating: number;
        ratingDistribution: {
            1: number;
            2: number;
            3: number;
            4: number;
            5: number;
        };
    }>;
}
