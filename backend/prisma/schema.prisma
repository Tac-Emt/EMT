// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELLED
}

enum EventCategory {
  CS
  RAS
  IAS
  WIE
}

enum EventType {
  CONGRESS
  CONFERENCE
  HACKATHON
  NORMAL
  ONLINE
}

enum Role {
  USER
  ADMIN
  ORGANIZER
  SPEAKER
}

enum RegistrationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  WAITLISTED
}

enum SpeakerStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model User {
  id              Int       @id @default(autoincrement())
  email           String    @unique
  password        String
  name            String
  role            Role      @default(USER)
  isEmailVerified Boolean   @default(false)
  otp             String?
  otpExpires      DateTime?
  passwordResetAt DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  bio             String?
  photo           String?
  organization    String?
  title           String?
  socialLinks     Json?

  // Relations
  organizedEvents EventOrganizer[] @relation("EventOrganizers")
  registrations   Registration[]
  speakerEvents   EventSpeaker[]
  speakerFeedbacks SpeakerFeedback[] @relation("SpeakerFeedbacks")
  userFeedbacks   SpeakerFeedback[] @relation("UserFeedbacks")
  speakerProfile  SpeakerProfile?  @relation("UserSpeakerProfile")
  assignedTasks   EventTask[]      @relation("AssignedTasks")
}

model Event {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  location    String
  capacity    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  status      EventStatus @default(DRAFT)
  image       String?
  agenda      Json?
  resources   Json?
  category    EventCategory
  type        EventType
  eventTag    String?
  registrationLink String?
  seriesId    Int?
  checkedIn   Boolean   @default(false)
  checkedInAt DateTime?
  slug        String    @unique
  pageContent Json?
  pageSettings Json?

  // Relations
  organizers      EventOrganizer[]
  registrations   Registration[]
  speakers        EventSpeaker[]
  feedbacks       SpeakerFeedback[]
  registrationTypes RegistrationType[]
  analytics       EventAnalytics?
  series          EventSeries?    @relation(fields: [seriesId], references: [id])
  eventResources  EventResource[]
  tasks           EventTask[]
  checkInCodes    CheckInCode[]
}

model EventAnalytics {
  id          Int      @id @default(autoincrement())
  event       Event    @relation(fields: [eventId], references: [id])
  eventId     Int      @unique
  views       Int      @default(0)
  registrations Int    @default(0)
  checkIns    Int      @default(0)
  lastUpdated DateTime @updatedAt
}

model RegistrationType {
  id          Int       @id @default(autoincrement())
  eventId     Int
  name        String
  description String?
  price       Float
  capacity    Int?
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  event         Event         @relation(fields: [eventId], references: [id])
  registrations Registration[]
}

model Registration {
  id              Int               @id @default(autoincrement())
  eventId         Int
  userId          Int
  typeId          Int
  status          RegistrationStatus @default(PENDING)
  checkInCodeId   Int?
  checkedIn       Boolean           @default(false)
  checkedInAt     DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  event       Event           @relation(fields: [eventId], references: [id])
  user        User            @relation(fields: [userId], references: [id])
  type        RegistrationType @relation(fields: [typeId], references: [id])
  checkInCode CheckInCode?    @relation(fields: [checkInCodeId], references: [id])

  @@unique([eventId, userId])
}

model CheckInCode {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  usedAt    DateTime?
  eventId   Int

  // Relations
  registrations Registration[]
  event        Event        @relation(fields: [eventId], references: [id])
}

model EventOrganizer {
  id                Int      @id @default(autoincrement())
  eventId           Int
  organizerId       Int
  isHost            Boolean  @default(false)
  pendingConfirmation Boolean @default(true)
  expiresAt         DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  event     Event @relation(fields: [eventId], references: [id])
  organizer User  @relation("EventOrganizers", fields: [organizerId], references: [id])

  @@unique([eventId, organizerId])
}

model EventSpeaker {
  id        Int          @id @default(autoincrement())
  eventId   Int
  speakerId Int
  status    SpeakerStatus @default(PENDING)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Relations
  event   Event @relation(fields: [eventId], references: [id])
  speaker User  @relation(fields: [speakerId], references: [id])

  @@unique([eventId, speakerId])
}

model SpeakerFeedback {
  id        Int      @id @default(autoincrement())
  eventId   Int
  speakerId Int
  userId    Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  event   Event @relation(fields: [eventId], references: [id])
  speaker User  @relation("SpeakerFeedbacks", fields: [speakerId], references: [id])
  user    User  @relation("UserFeedbacks", fields: [userId], references: [id])

  @@unique([eventId, speakerId, userId])
}

model SpeakerProfile {
  id          Int      @id @default(autoincrement())
  user        User     @relation("UserSpeakerProfile", fields: [userId], references: [id])
  userId      Int      @unique
  bio         String?
  expertise   String[]
  availability Json?   // Store availability calendar
  rating      Float    @default(0)
  totalRatings Int     @default(0)
  agreement   String?  // URL to signed agreement
  paymentInfo Json?    // Payment details
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model EventSeries {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  events      Event[]
}

model EventResource {
  id          Int      @id @default(autoincrement())
  eventId     Int
  title       String
  description String?
  type        String
  url         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  event       Event    @relation(fields: [eventId], references: [id])
}

model EventTask {
  id          Int      @id @default(autoincrement())
  eventId     Int
  title       String
  description String?
  status      TaskStatus @default(PENDING)
  dueDate     DateTime?
  assigneeId  Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  event       Event    @relation(fields: [eventId], references: [id])
  assignee    User?    @relation("AssignedTasks", fields: [assigneeId], references: [id])
}